               .deffile adi_defs.asm
               .deffile ddi_defs.asm
               .deffile reg_defs.asm
               .deffile sce_defs.asm
               
               ; Number of supported tasks
               .define TASK_COUNT      1
               
               ; Resource-specified definitions, if any
               .define AUXIO_I2C_SCL           9
               .define AUXIO_I2C_SDA           10
               .define I2C_BASE_DELAY          9
               .define I2C_EXT_DELAY           4
               .define I2C_STRETCH_TIMEOUT_US  10
               .define I2C_WAIT_STRETCH_DELAY  5
               .alias  i2cTaskName             i2cimupressurewarray1111
               
               
               .segment begin "Framework"
               
               
               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector
               
               
               
               
               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]
               
                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck
               
               FwEmptyFunc:            ; Done
000b ---- adb7                         rts
               
               
               
               
               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]
               
                                           ; Handle initialize request, if any
000f ---- 6871                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq
               
                                           ; Handle execute request, if any
0012 ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq
               
                                           ; Handle terminate request, if any
0015 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq
               
                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1
               
001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop
               
                                       ; Update which tasks are ...
001c ---- 786f                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6871                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6873                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c6f                         st          R7, [#fwCtrlExt/bvActiveTasks]
               
                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]
               
                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;
               
               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]
               
                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0
               
               
               
               
               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 186f                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip
               
                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]
               
                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip
               
                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1
               
0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop
               
                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]
               
                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]
               
                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc
               
                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;
               
               
               
               
               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]
               
                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]
               
                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed
               
               
               
               
               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]
               
                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skip
               
                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c70                             st          R7, [#fwCtrlExt/bvTaskIoAlert]
               
                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skip:
                                       ; Fall through to PowerDown ...
               
               
               
               
               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown
               
                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep
               
               
               
               
0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts
               
0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts
               
               
               
               
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0
               pFwTaskInitializeFuncTable:
0068 ---- 011f                         dw          #i2cimupressurewarray1111/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 01df                         dw          #i2cimupressurewarray1111/execute
               pFwTaskTerminateFuncTable:
006a ---- 0399                         dw          #i2cimupressurewarray1111/terminate
               
               
               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
               
               ; External control data, shared with the driver
               fwCtrlExt:
006f ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0070 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0071 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0072 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0073 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop
               
               
               .segment end "Framework"
               
               
               fwTaskDataStructures:
               .segment begin "Task: i2cimupressurewarray1111"
               i2cimupressurewarray1111/cfg:
               i2cimupressurewarray1111/input:
               i2cimupressurewarray1111/input/prom:
0074 ---- 00a0                         dw          #160
               i2cimupressurewarray1111/input/testval:
0075 ---- dddd                         dw          #56797
               i2cimupressurewarray1111/output:
               i2cimupressurewarray1111/output/pressureinit:
0076 ---- 0000                         dw          #0
0077 ---- 0000                         dw          #0
0078 ---- 0000                         dw          #0
0079 ---- 0000                         dw          #0
007a ---- 0000                         dw          #0
007b ---- 0000                         dw          #0
007c ---- 0000                         dw          #0
               i2cimupressurewarray1111/output/result:
007d ---- 0000                         dw          #0
007e ---- 0000                         dw          #0
007f ---- 0000                         dw          #0
0080 ---- 0000                         dw          #0
0081 ---- 0000                         dw          #0
0082 ---- 0000                         dw          #0
0083 ---- 0000                         dw          #0
0084 ---- 0000                         dw          #0
0085 ---- 0000                         dw          #0
0086 ---- 0000                         dw          #0
0087 ---- 0000                         dw          #0
0088 ---- 0000                         dw          #0
0089 ---- 0000                         dw          #0
008a ---- 0000                         dw          #0
008b ---- 0000                         dw          #0
008c ---- 0000                         dw          #0
008d ---- 0000                         dw          #0
008e ---- 0000                         dw          #0
008f ---- 0000                         dw          #0
0090 ---- 0000                         dw          #0
0091 ---- 0000                         dw          #0
0092 ---- 0000                         dw          #0
0093 ---- 0000                         dw          #0
0094 ---- 0000                         dw          #0
0095 ---- 0000                         dw          #0
0096 ---- 0000                         dw          #0
0097 ---- 0000                         dw          #0
0098 ---- 0000                         dw          #0
0099 ---- 0000                         dw          #0
009a ---- 0000                         dw          #0
009b ---- 0000                         dw          #0
009c ---- 0000                         dw          #0
009d ---- 0000                         dw          #0
009e ---- 0000                         dw          #0
009f ---- 0000                         dw          #0
00a0 ---- 0000                         dw          #0
00a1 ---- 0000                         dw          #0
00a2 ---- 0000                         dw          #0
00a3 ---- 0000                         dw          #0
00a4 ---- 0000                         dw          #0
00a5 ---- 0000                         dw          #0
00a6 ---- 0000                         dw          #0
00a7 ---- 0000                         dw          #0
00a8 ---- 0000                         dw          #0
00a9 ---- 0000                         dw          #0
00aa ---- 0000                         dw          #0
00ab ---- 0000                         dw          #0
00ac ---- 0000                         dw          #0
00ad ---- 0000                         dw          #0
00ae ---- 0000                         dw          #0
00af ---- 0000                         dw          #0
00b0 ---- 0000                         dw          #0
00b1 ---- 0000                         dw          #0
00b2 ---- 0000                         dw          #0
00b3 ---- 0000                         dw          #0
00b4 ---- 0000                         dw          #0
00b5 ---- 0000                         dw          #0
00b6 ---- 0000                         dw          #0
00b7 ---- 0000                         dw          #0
00b8 ---- 0000                         dw          #0
00b9 ---- 0000                         dw          #0
00ba ---- 0000                         dw          #0
00bb ---- 0000                         dw          #0
00bc ---- 0000                         dw          #0
00bd ---- 0000                         dw          #0
00be ---- 0000                         dw          #0
00bf ---- 0000                         dw          #0
00c0 ---- 0000                         dw          #0
00c1 ---- 0000                         dw          #0
00c2 ---- 0000                         dw          #0
00c3 ---- 0000                         dw          #0
00c4 ---- 0000                         dw          #0
00c5 ---- 0000                         dw          #0
00c6 ---- 0000                         dw          #0
00c7 ---- 0000                         dw          #0
00c8 ---- 0000                         dw          #0
00c9 ---- 0000                         dw          #0
00ca ---- 0000                         dw          #0
00cb ---- 0000                         dw          #0
00cc ---- 0000                         dw          #0
00cd ---- 0000                         dw          #0
00ce ---- 0000                         dw          #0
00cf ---- 0000                         dw          #0
00d0 ---- 0000                         dw          #0
00d1 ---- 0000                         dw          #0
00d2 ---- 0000                         dw          #0
00d3 ---- 0000                         dw          #0
00d4 ---- 0000                         dw          #0
00d5 ---- 0000                         dw          #0
00d6 ---- 0000                         dw          #0
00d7 ---- 0000                         dw          #0
00d8 ---- 0000                         dw          #0
00d9 ---- 0000                         dw          #0
00da ---- 0000                         dw          #0
00db ---- 0000                         dw          #0
00dc ---- 0000                         dw          #0
00dd ---- 0000                         dw          #0
00de ---- 0000                         dw          #0
00df ---- 0000                         dw          #0
00e0 ---- 0000                         dw          #0
00e1 ---- 0000                         dw          #0
00e2 ---- 0000                         dw          #0
00e3 ---- 0000                         dw          #0
00e4 ---- 0000                         dw          #0
00e5 ---- 0000                         dw          #0
00e6 ---- 0000                         dw          #0
00e7 ---- 0000                         dw          #0
00e8 ---- 0000                         dw          #0
00e9 ---- 0000                         dw          #0
00ea ---- 0000                         dw          #0
00eb ---- 0000                         dw          #0
00ec ---- 0000                         dw          #0
00ed ---- 0000                         dw          #0
00ee ---- 0000                         dw          #0
00ef ---- 0000                         dw          #0
00f0 ---- 0000                         dw          #0
00f1 ---- 0000                         dw          #0
00f2 ---- 0000                         dw          #0
00f3 ---- 0000                         dw          #0
00f4 ---- 0000                         dw          #0
00f5 ---- 0000                         dw          #0
00f6 ---- 0000                         dw          #0
00f7 ---- 0000                         dw          #0
00f8 ---- 0000                         dw          #0
00f9 ---- 0000                         dw          #0
00fa ---- 0000                         dw          #0
00fb ---- 0000                         dw          #0
00fc ---- 0000                         dw          #0
00fd ---- 0000                         dw          #0
00fe ---- 0000                         dw          #0
00ff ---- 0000                         dw          #0
0100 ---- 0000                         dw          #0
0101 ---- 0000                         dw          #0
0102 ---- 0000                         dw          #0
0103 ---- 0000                         dw          #0
0104 ---- 0000                         dw          #0
0105 ---- 0000                         dw          #0
0106 ---- 0000                         dw          #0
0107 ---- 0000                         dw          #0
0108 ---- 0000                         dw          #0
0109 ---- 0000                         dw          #0
010a ---- 0000                         dw          #0
               i2cimupressurewarray1111/output/temperature:
010b ---- 0000                         dw          #0
010c ---- 0000                         dw          #0
010d ---- 0000                         dw          #0
010e ---- 0000                         dw          #0
010f ---- 0000                         dw          #0
0110 ---- 0000                         dw          #0
               i2cimupressurewarray1111/output/tempresult:
0111 ---- 0000                         dw          #0
0112 ---- 0000                         dw          #0
0113 ---- 0000                         dw          #0
0114 ---- 0000                         dw          #0
0115 ---- 0000                         dw          #0
0116 ---- 0000                         dw          #0
               i2cimupressurewarray1111/state:
               i2cimupressurewarray1111/state/count1:
0117 ---- 0000                         dw          #0
               i2cimupressurewarray1111/state/i2cStatus:
0118 ---- 0000                         dw          #0
               i2cimupressurewarray1111/state/magcount:
0119 ---- 0000                         dw          #0
               i2cimupressurewarray1111/state/ncount:
011a ---- 0000                         dw          #0
               i2cimupressurewarray1111/state/outputcount:
011b ---- 0031                         dw          #49
               i2cimupressurewarray1111/state/pressurecount:
011c ---- 0000                         dw          #0
               i2cimupressurewarray1111/state/prom:
011d ---- 0000                         dw          #0
               i2cimupressurewarray1111/state/timecount:
011e ---- 0000                         dw          #0
               .segment end "Task: i2cimupressurewarray1111"
               
               
               .segment begin "Task: i2cimupressurewarray1111"
               i2cimupressurewarray1111/initialize:
               ;? U16 ManufacturerIdLow;
               ;? 
               ;? // Reg Bank Select
               ;? i2cStart();
011f ---- 6000                         ld          R6, #0x0000
0120 ---- 17a0                         jsr         I2cStart
0121 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | ICM_I2C_ADDR);
0122 ---- 70d0                         ld          R7, #208
0123 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0124 ---- 17b7                         jsr         I2cTxByte
0125 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(REG_USERBANKSELECT);
0126 ---- 707f                         ld          R7, #127
0127 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0128 ---- 17b7                         jsr         I2cTxByte
0129 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(0x00);
012a ---- 7000                         ld          R7, #0
012b ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
012c ---- 17b7                         jsr         I2cTxByte
012d ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cStop();
012e ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
012f ---- 17d5                         jsr         I2cStop
0130 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? // Reset
               ;? i2cStart();
0131 ---- 6000                         ld          R6, #0x0000
0132 ---- 17a0                         jsr         I2cStart
0133 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | ICM_I2C_ADDR);
0134 ---- 70d0                         ld          R7, #208
0135 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0136 ---- 17b7                         jsr         I2cTxByte
0137 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(PWR_MGMT_1);
0138 ---- 7006                         ld          R7, #6
0139 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
013a ---- 17b7                         jsr         I2cTxByte
013b ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(0x01);
013c ---- 7001                         ld          R7, #1
013d ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
013e ---- 17b7                         jsr         I2cTxByte
013f ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cStop();
0140 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0141 ---- 17d5                         jsr         I2cStop
0142 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? //Enabling Bypass
               ;? i2cStart();
0143 ---- 6000                         ld          R6, #0x0000
0144 ---- 17a0                         jsr         I2cStart
0145 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | ICM_I2C_ADDR);
0146 ---- 70d0                         ld          R7, #208
0147 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0148 ---- 17b7                         jsr         I2cTxByte
0149 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(INT_PIN_CFG);
014a ---- 700f                         ld          R7, #15
014b ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
014c ---- 17b7                         jsr         I2cTxByte
014d ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(0x02);
014e ---- 7002                         ld          R7, #2
014f ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0150 ---- 17b7                         jsr         I2cTxByte
0151 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cStop();
0152 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0153 ---- 17d5                         jsr         I2cStop
0154 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? // Read the Magnetometer Manufacturer ID
               ;? //i2cStart();
               ;? //i2cTx(I2C_OP_WRITE | MAG_I2C_ADDRESS);
               ;? //i2cTx(REG_MAGNETOMETER_ID);
               ;? //i2cRepeatedStart();
               ;? //i2cTx(I2C_OP_READ | MAG_I2C_ADDRESS);
               ;? //i2cRxNack(ManufacturerIdLow);
               ;? //output.magId = ManufacturerIdLow;
               ;? //i2cStop();
               ;? 
               ;? //Continuous Mode
               ;? i2cStart();
0155 ---- 6000                         ld          R6, #0x0000
0156 ---- 17a0                         jsr         I2cStart
0157 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | MAG_I2C_ADDRESS);
0158 ---- 7018                         ld          R7, #24
0159 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
015a ---- 17b7                         jsr         I2cTxByte
015b ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(CNTL2);
015c ---- 7031                         ld          R7, #49
015d ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
015e ---- 17b7                         jsr         I2cTxByte
015f ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(0x08);
0160 ---- 7008                         ld          R7, #8
0161 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0162 ---- 17b7                         jsr         I2cTxByte
0163 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cStop();
0164 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0165 ---- 17d5                         jsr         I2cStop
0166 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? // Read the Manufacturer ID
               ;? //i2cStart();
               ;? //i2cTx(I2C_OP_WRITE | ICM_I2C_ADDR);
               ;? //i2cTx(REG_MANUFACTURER_ID);
               ;? //i2cRepeatedStart();
               ;? //i2cTx(I2C_OP_READ | ICM_I2C_ADDR);
               ;? //i2cRxNack(ManufacturerIdLow);
               ;? //output.manuId = ManufacturerIdLow;
               ;? //i2cStop();
               ;? 
               ;? //Setup
               ;? i2cStart();
0167 ---- 6000                         ld          R6, #0x0000
0168 ---- 17a0                         jsr         I2cStart
0169 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | ICM_I2C_ADDR);
016a ---- 70d0                         ld          R7, #208
016b ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
016c ---- 17b7                         jsr         I2cTxByte
016d ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(REG_USERBANKSELECT);
016e ---- 707f                         ld          R7, #127
016f ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0170 ---- 17b7                         jsr         I2cTxByte
0171 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(0x20);
0172 ---- 7020                         ld          R7, #32
0173 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0174 ---- 17b7                         jsr         I2cTxByte
0175 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cStop();
0176 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0177 ---- 17d5                         jsr         I2cStop
0178 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? i2cStart();
0179 ---- 6000                         ld          R6, #0x0000
017a ---- 17a0                         jsr         I2cStart
017b ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | ICM_I2C_ADDR);
017c ---- 70d0                         ld          R7, #208
017d ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
017e ---- 17b7                         jsr         I2cTxByte
017f ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(ACCEL_CONFIG);
0180 ---- 7014                         ld          R7, #20
0181 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0182 ---- 17b7                         jsr         I2cTxByte
0183 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(0x06);
0184 ---- 7006                         ld          R7, #6
0185 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0186 ---- 17b7                         jsr         I2cTxByte
0187 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cStop();
0188 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0189 ---- 17d5                         jsr         I2cStop
018a ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? // Reg Bank Select
               ;? i2cStart();
018b ---- 6000                         ld          R6, #0x0000
018c ---- 17a0                         jsr         I2cStart
018d ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | ICM_I2C_ADDR);
018e ---- 70d0                         ld          R7, #208
018f ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0190 ---- 17b7                         jsr         I2cTxByte
0191 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(REG_USERBANKSELECT);
0192 ---- 707f                         ld          R7, #127
0193 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0194 ---- 17b7                         jsr         I2cTxByte
0195 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(0x00);
0196 ---- 7000                         ld          R7, #0
0197 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0198 ---- 17b7                         jsr         I2cTxByte
0199 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cStop();
019a ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
019b ---- 17d5                         jsr         I2cStop
019c ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? //Presssure Sensor
               ;? 
               ;? i2cStart();
019d ---- 6000                         ld          R6, #0x0000
019e ---- 17a0                         jsr         I2cStart
019f ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | MS5837_I2C_ADDR);
01a0 ---- 70ec                         ld          R7, #236
01a1 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01a2 ---- 17b7                         jsr         I2cTxByte
01a3 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(MS5837_RESET);
01a4 ---- 701e                         ld          R7, #30
01a5 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01a6 ---- 17b7                         jsr         I2cTxByte
01a7 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cStop();
01a8 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01a9 ---- 17d5                         jsr         I2cStop
01aa ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? for(U16 n = 0;n <7;n++){
01ab ---- 0000                         ld          R0, #0
               /id0397:
               ;?     i2cStart();
01ac ---- 6000                             ld          R6, #0x0000
01ad ---- 17a0                             jsr         I2cStart
01ae ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_WRITE | MS5837_I2C_ADDR);
01af ---- 70ec                             ld          R7, #236
01b0 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01b1 ---- 17b7                             jsr         I2cTxByte
01b2 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(MS5837_PROM + state.prom);
01b3 ---- 791d                             ld          R7, [#i2cimupressurewarray1111/state/prom]
01b4 8600 f8a0                             add         R7, #160
01b6 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01b7 ---- 17b7                             jsr         I2cTxByte
01b8 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cStop();
01b9 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01ba ---- 17d5                             jsr         I2cStop
01bb ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cStart();
01bc ---- 6000                             ld          R6, #0x0000
01bd ---- 17a0                             jsr         I2cStart
01be ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_READ | MS5837_I2C_ADDR);
01bf ---- 70ed                             ld          R7, #237
01c0 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01c1 ---- 17b7                             jsr         I2cTxByte
01c2 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cRxAck(output.tempresult[0]);
01c3 ---- 7000                             ld          R7, #0x0000
01c4 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01c5 ---- 17e0                             jsr         I2cRxByte
01c6 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01c7 ---- 7d11                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 0)]
               ;?     i2cRxNack(output.tempresult[1]);
01c8 ---- 7001                             ld          R7, #0x0001
01c9 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01ca ---- 17e0                             jsr         I2cRxByte
01cb ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01cc ---- 7d12                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 1)]
               ;?     i2cStop();
01cd ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01ce ---- 17d5                             jsr         I2cStop
01cf ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     output.pressureinit[n] = (output.tempresult[0] <<8) | output.tempresult[1];
01d0 ---- 5911                             ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 0)]
01d1 ---- dda0                             lsl         R5, #8
01d2 ---- 6912                             ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 1)]
01d3 ---- dd0e                             or          R5, R6
01d4 ---- 6076                             ld          R6, #(i2cimupressurewarray1111/output/pressureinit + 0)
01d5 ---- df3e                             st          R5, [R6+R0]
               ;?     state.prom = 2+state.prom;
01d6 ---- 591d                             ld          R5, [#i2cimupressurewarray1111/state/prom]
01d7 ---- d802                             add         R5, #2
01d8 ---- 5d1d                             st          R5, [#i2cimupressurewarray1111/state/prom]
               ;?     
               ;? }
01d9 ---- 8801                         add         R0, #1
01da ---- 8a07                         cmp         R0, #7
01db ---- aed0                         bltu        /id0397
               ;? 
               ;? //fwGenAlertInterrupt();
               ;? 
               ;? 
               ;? //TODO: output this data
               ;? 
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
01dc ---- 0001                         ld          R0, #1
01dd ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               i2cimupressurewarray1111/initializeDone:
01de ---- adb7                         rts         
               
               
               
               
               i2cimupressurewarray1111/execute:
               ;? U16 n = state.ncount;
01df ---- 091a                         ld          R0, [#i2cimupressurewarray1111/state/ncount]
               ;? //Should record zero and 20 alternatively everytime
               ;? if(n == 0){
01e0 ---- 8a00                         cmp         R0, #0
01e1 ---- be04                         bneq        /id0401
               ;?     output.result[n] = state.timecount;
01e2 ---- 591e                             ld          R5, [#i2cimupressurewarray1111/state/timecount]
01e3 ---- 607d                             ld          R6, #(i2cimupressurewarray1111/output/result + 0)
01e4 ---- df3e                             st          R5, [R6+R0]
               ;?     n = n+1;
01e5 ---- 8801                             add         R0, #1
               ;? }
               /id0401:
               ;? 
               ;? //if(n >49){
               ;? //    n = 0;
               ;? //    fwGenAlertInterrupt();
               ;? //}
               ;? state.timecount = state.timecount + 1;
01e6 ---- 591e                         ld          R5, [#i2cimupressurewarray1111/state/timecount]
01e7 ---- d801                         add         R5, #1
01e8 ---- 5d1e                         st          R5, [#i2cimupressurewarray1111/state/timecount]
               ;? if(state.timecount > 39){
01e9 ---- 591e                         ld          R5, [#i2cimupressurewarray1111/state/timecount]
01ea ---- da27                         cmp         R5, #39
01eb ---- 9e02                         bleu        /id0407
               ;?     state.timecount = 0;
01ec ---- 5000                             ld          R5, #0
01ed ---- 5d1e                             st          R5, [#i2cimupressurewarray1111/state/timecount]
               ;? }
               /id0407:
               ;? i2cStart();
01ee ---- 6000                         ld          R6, #0x0000
01ef ---- 17a0                         jsr         I2cStart
01f0 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_WRITE | ICM_I2C_ADDR);
01f1 ---- 70d0                         ld          R7, #208
01f2 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01f3 ---- 17b7                         jsr         I2cTxByte
01f4 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(ACCEL_XOUT_H);
01f5 ---- 702d                         ld          R7, #45
01f6 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01f7 ---- 17b7                         jsr         I2cTxByte
01f8 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? i2cRepeatedStart();
01f9 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01fa ---- 179a                         jsr         I2cRepeatedStart
01fb ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? i2cTx(I2C_OP_READ | ICM_I2C_ADDR);
01fc ---- 70d1                         ld          R7, #209
01fd ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
01fe ---- 17b7                         jsr         I2cTxByte
01ff ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? //TODO: testing this part as for loop
               ;? //while
               ;? //i2cRxAck(output.tempresult[0]);
               ;? i2cRxAck(output.tempresult[0]);
0200 ---- 7000                         ld          R7, #0x0000
0201 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0202 ---- 17e0                         jsr         I2cRxByte
0203 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0204 ---- 7d11                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 0)]
               ;? i2cRxAck(output.tempresult[1]);
0205 ---- 7000                         ld          R7, #0x0000
0206 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0207 ---- 17e0                         jsr         I2cRxByte
0208 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0209 ---- 7d12                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 1)]
               ;? i2cRxAck(output.tempresult[2]);
020a ---- 7000                         ld          R7, #0x0000
020b ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
020c ---- 17e0                         jsr         I2cRxByte
020d ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
020e ---- 7d13                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 2)]
               ;? i2cRxAck(output.tempresult[3]);
020f ---- 7000                         ld          R7, #0x0000
0210 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0211 ---- 17e0                         jsr         I2cRxByte
0212 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0213 ---- 7d14                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 3)]
               ;? i2cRxAck(output.tempresult[4]);
0214 ---- 7000                         ld          R7, #0x0000
0215 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0216 ---- 17e0                         jsr         I2cRxByte
0217 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0218 ---- 7d15                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 4)]
               ;? i2cRxAck(output.tempresult[5]);
0219 ---- 7000                         ld          R7, #0x0000
021a ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
021b ---- 17e0                         jsr         I2cRxByte
021c ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
021d ---- 7d16                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 5)]
               ;? 
               ;? output.result[n] = (output.tempresult[0] <<8) | output.tempresult[1];
021e ---- 5911                         ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 0)]
021f ---- dda0                         lsl         R5, #8
0220 ---- 6912                         ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 1)]
0221 ---- dd0e                         or          R5, R6
0222 ---- 607d                         ld          R6, #(i2cimupressurewarray1111/output/result + 0)
0223 ---- df3e                         st          R5, [R6+R0]
               ;? n = n+1;
0224 ---- 8801                         add         R0, #1
               ;? output.result[n] = (output.tempresult[2] <<8) | output.tempresult[3];
0225 ---- 5913                         ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 2)]
0226 ---- dda0                         lsl         R5, #8
0227 ---- 6914                         ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 3)]
0228 ---- dd0e                         or          R5, R6
0229 ---- 607d                         ld          R6, #(i2cimupressurewarray1111/output/result + 0)
022a ---- df3e                         st          R5, [R6+R0]
               ;? n = n+1;
022b ---- 8801                         add         R0, #1
               ;? output.result[n] = (output.tempresult[4] <<8) | output.tempresult[5];
022c ---- 5915                         ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 4)]
022d ---- dda0                         lsl         R5, #8
022e ---- 6916                         ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 5)]
022f ---- dd0e                         or          R5, R6
0230 ---- 607d                         ld          R6, #(i2cimupressurewarray1111/output/result + 0)
0231 ---- df3e                         st          R5, [R6+R0]
               ;? n = n+1;
0232 ---- 8801                         add         R0, #1
               ;? 
               ;? i2cRxAck(output.tempresult[0]);
0233 ---- 7000                         ld          R7, #0x0000
0234 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0235 ---- 17e0                         jsr         I2cRxByte
0236 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0237 ---- 7d11                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 0)]
               ;? i2cRxAck(output.tempresult[1]);
0238 ---- 7000                         ld          R7, #0x0000
0239 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
023a ---- 17e0                         jsr         I2cRxByte
023b ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
023c ---- 7d12                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 1)]
               ;? i2cRxAck(output.tempresult[2]);
023d ---- 7000                         ld          R7, #0x0000
023e ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
023f ---- 17e0                         jsr         I2cRxByte
0240 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0241 ---- 7d13                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 2)]
               ;? i2cRxAck(output.tempresult[3]);
0242 ---- 7000                         ld          R7, #0x0000
0243 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0244 ---- 17e0                         jsr         I2cRxByte
0245 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0246 ---- 7d14                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 3)]
               ;? i2cRxAck(output.tempresult[4]);
0247 ---- 7000                         ld          R7, #0x0000
0248 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0249 ---- 17e0                         jsr         I2cRxByte
024a ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
024b ---- 7d15                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 4)]
               ;? i2cRxNack(output.tempresult[5]);
024c ---- 7001                         ld          R7, #0x0001
024d ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
024e ---- 17e0                         jsr         I2cRxByte
024f ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0250 ---- 7d16                         st          R7, [#(i2cimupressurewarray1111/output/tempresult + 5)]
               ;? 
               ;? output.result[n] = (output.tempresult[0] <<8) | output.tempresult[1];
0251 ---- 5911                         ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 0)]
0252 ---- dda0                         lsl         R5, #8
0253 ---- 6912                         ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 1)]
0254 ---- dd0e                         or          R5, R6
0255 ---- 607d                         ld          R6, #(i2cimupressurewarray1111/output/result + 0)
0256 ---- df3e                         st          R5, [R6+R0]
               ;? n = n+1;
0257 ---- 8801                         add         R0, #1
               ;? output.result[n] = (output.tempresult[2] <<8) | output.tempresult[3];
0258 ---- 5913                         ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 2)]
0259 ---- dda0                         lsl         R5, #8
025a ---- 6914                         ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 3)]
025b ---- dd0e                         or          R5, R6
025c ---- 607d                         ld          R6, #(i2cimupressurewarray1111/output/result + 0)
025d ---- df3e                         st          R5, [R6+R0]
               ;? n = n+1;
025e ---- 8801                         add         R0, #1
               ;? output.result[n] = (output.tempresult[4] <<8) | output.tempresult[5];
025f ---- 5915                         ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 4)]
0260 ---- dda0                         lsl         R5, #8
0261 ---- 6916                         ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 5)]
0262 ---- dd0e                         or          R5, R6
0263 ---- 607d                         ld          R6, #(i2cimupressurewarray1111/output/result + 0)
0264 ---- df3e                         st          R5, [R6+R0]
               ;? n = n+1;
0265 ---- 8801                         add         R0, #1
               ;? i2cStop();
0266 ---- 6918                         ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0267 ---- 17d5                         jsr         I2cStop
0268 ---- 6d18                         st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? 
               ;? state.magcount = state.magcount+1;
0269 ---- 5919                         ld          R5, [#i2cimupressurewarray1111/state/magcount]
026a ---- d801                         add         R5, #1
026b ---- 5d19                         st          R5, [#i2cimupressurewarray1111/state/magcount]
               ;? if(state.magcount == 4){
026c ---- 5919                         ld          R5, [#i2cimupressurewarray1111/state/magcount]
026d ---- da04                         cmp         R5, #4
026e ---- be54                         bneq        /id0489
               ;?     state.magcount = 0;
026f ---- 5000                             ld          R5, #0
0270 ---- 5d19                             st          R5, [#i2cimupressurewarray1111/state/magcount]
               ;?     //Read Data
               ;?     i2cStart();
0271 ---- 6000                             ld          R6, #0x0000
0272 ---- 17a0                             jsr         I2cStart
0273 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_WRITE | MAG_I2C_ADDRESS);
0274 ---- 7018                             ld          R7, #24
0275 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0276 ---- 17b7                             jsr         I2cTxByte
0277 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(HXL);
0278 ---- 7011                             ld          R7, #17
0279 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
027a ---- 17b7                             jsr         I2cTxByte
027b ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     
               ;?     i2cRepeatedStart();
027c ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
027d ---- 179a                             jsr         I2cRepeatedStart
027e ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_READ | MAG_I2C_ADDRESS);
027f ---- 7019                             ld          R7, #25
0280 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0281 ---- 17b7                             jsr         I2cTxByte
0282 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     
               ;?     i2cRxAck(output.tempresult[1]);
0283 ---- 7000                             ld          R7, #0x0000
0284 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0285 ---- 17e0                             jsr         I2cRxByte
0286 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0287 ---- 7d12                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 1)]
               ;?     i2cRxAck(output.tempresult[0]);
0288 ---- 7000                             ld          R7, #0x0000
0289 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
028a ---- 17e0                             jsr         I2cRxByte
028b ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
028c ---- 7d11                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 0)]
               ;?     i2cRxAck(output.tempresult[3]);
028d ---- 7000                             ld          R7, #0x0000
028e ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
028f ---- 17e0                             jsr         I2cRxByte
0290 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0291 ---- 7d14                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 3)]
               ;?     i2cRxAck(output.tempresult[2]);
0292 ---- 7000                             ld          R7, #0x0000
0293 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0294 ---- 17e0                             jsr         I2cRxByte
0295 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0296 ---- 7d13                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 2)]
               ;?     i2cRxAck(output.tempresult[5]);
0297 ---- 7000                             ld          R7, #0x0000
0298 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0299 ---- 17e0                             jsr         I2cRxByte
029a ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
029b ---- 7d16                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 5)]
               ;?     i2cRxAck(output.tempresult[4]);
029c ---- 7000                             ld          R7, #0x0000
029d ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
029e ---- 17e0                             jsr         I2cRxByte
029f ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02a0 ---- 7d15                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 4)]
               ;?     
               ;?     output.result[n] = (output.tempresult[0] <<8) | output.tempresult[1];
02a1 ---- 5911                             ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 0)]
02a2 ---- dda0                             lsl         R5, #8
02a3 ---- 6912                             ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 1)]
02a4 ---- dd0e                             or          R5, R6
02a5 ---- 607d                             ld          R6, #(i2cimupressurewarray1111/output/result + 0)
02a6 ---- df3e                             st          R5, [R6+R0]
               ;?     
               ;?     i2cRxAck(output.tempresult[0]);
02a7 ---- 7000                             ld          R7, #0x0000
02a8 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02a9 ---- 17e0                             jsr         I2cRxByte
02aa ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02ab ---- 7d11                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 0)]
               ;?     i2cRxNack(output.tempresult[1]);
02ac ---- 7001                             ld          R7, #0x0001
02ad ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02ae ---- 17e0                             jsr         I2cRxByte
02af ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02b0 ---- 7d12                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 1)]
               ;?     
               ;?     n = n+1;
02b1 ---- 8801                             add         R0, #1
               ;?     output.result[n] = (output.tempresult[2] <<8) | output.tempresult[3];
02b2 ---- 5913                             ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 2)]
02b3 ---- dda0                             lsl         R5, #8
02b4 ---- 6914                             ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 3)]
02b5 ---- dd0e                             or          R5, R6
02b6 ---- 607d                             ld          R6, #(i2cimupressurewarray1111/output/result + 0)
02b7 ---- df3e                             st          R5, [R6+R0]
               ;?     n = n+1;
02b8 ---- 8801                             add         R0, #1
               ;?     output.result[n] = (output.tempresult[4] <<8) | output.tempresult[5];
02b9 ---- 5915                             ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 4)]
02ba ---- dda0                             lsl         R5, #8
02bb ---- 6916                             ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 5)]
02bc ---- dd0e                             or          R5, R6
02bd ---- 607d                             ld          R6, #(i2cimupressurewarray1111/output/result + 0)
02be ---- df3e                             st          R5, [R6+R0]
               ;?     n = n+1;
02bf ---- 8801                             add         R0, #1
               ;?     i2cStop();
02c0 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02c1 ---- 17d5                             jsr         I2cStop
02c2 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? }
               /id0489:
               ;? 
               ;? state.pressurecount = state.pressurecount +1;
02c3 ---- 591c                         ld          R5, [#i2cimupressurewarray1111/state/pressurecount]
02c4 ---- d801                         add         R5, #1
02c5 ---- 5d1c                         st          R5, [#i2cimupressurewarray1111/state/pressurecount]
               ;? if(state.pressurecount == 10){
02c6 ---- 591c                         ld          R5, [#i2cimupressurewarray1111/state/pressurecount]
02c7 ---- da0a                         cmp         R5, #10
02c8 ---- b601                         beq         1 ; Repaired out-of-range bneq
02c9 ---- 078c                         jmp         /id0547
               ;?     state.pressurecount = 0;
02ca ---- 5000                             ld          R5, #0
02cb ---- 5d1c                             st          R5, [#i2cimupressurewarray1111/state/pressurecount]
               ;?     //start of pressure sensor
               ;?     //Request D1 Conversion
               ;?     i2cStart();
02cc ---- 6000                             ld          R6, #0x0000
02cd ---- 17a0                             jsr         I2cStart
02ce ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_WRITE | MS5837_I2C_ADDR);
02cf ---- 70ec                             ld          R7, #236
02d0 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02d1 ---- 17b7                             jsr         I2cTxByte
02d2 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(MS5837_CONV_D1_4096);
02d3 ---- 704a                             ld          R7, #74
02d4 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02d5 ---- 17b7                             jsr         I2cTxByte
02d6 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cStop();
02d7 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02d8 ---- 17d5                             jsr         I2cStop
02d9 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     
               ;?     
               ;?     //TODO: probably not want it so test pressure sensor without while
               ;?     //timeout changes the status?
               ;?     
               ;?     state.count1 = 1;
02da ---- 5001                             ld          R5, #1
02db ---- 5d17                             st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?     while(state.count1 > 0){
               /id0563:
02dc ---- 5917                             ld          R5, [#i2cimupressurewarray1111/state/count1]
02dd ---- da00                             cmp         R5, #0
02de ---- 9e09                             bleu        /id0564
               ;?         state.count1 = state.count1 +1;
02df ---- 5917                                 ld          R5, [#i2cimupressurewarray1111/state/count1]
02e0 ---- d801                                 add         R5, #1
02e1 ---- 5d17                                 st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?         if(state.i2cStatus == 0x0001){
02e2 ---- 5918                                 ld          R5, [#i2cimupressurewarray1111/state/i2cStatus]
02e3 ---- da01                                 cmp         R5, #1
02e4 ---- be02                                 bneq        /id0567
               ;?             state.count1 = 0;
02e5 ---- 5000                                     ld          R5, #0
02e6 ---- 5d17                                     st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?         }
               /id0567:
               ;?     }
02e7 ---- 06dc                             jmp         /id0563
               /id0564:
               ;?     
               ;?     i2cStart();
02e8 ---- 6000                             ld          R6, #0x0000
02e9 ---- 17a0                             jsr         I2cStart
02ea ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_WRITE | MS5837_I2C_ADDR);
02eb ---- 70ec                             ld          R7, #236
02ec ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02ed ---- 17b7                             jsr         I2cTxByte
02ee ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(MS5837_ADC_READ);
02ef ---- 7000                             ld          R7, #0
02f0 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02f1 ---- 17b7                             jsr         I2cTxByte
02f2 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cStop();
02f3 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
02f4 ---- 17d5                             jsr         I2cStop
02f5 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     
               ;?     
               ;?     //TODO: probably not want it so test pressure sensor without while
               ;?     //timeout changes the status?
               ;?     
               ;?     state.count1= 1;
02f6 ---- 5001                             ld          R5, #1
02f7 ---- 5d17                             st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?     while(state.count1 >0){
               /id0583:
02f8 ---- 5917                             ld          R5, [#i2cimupressurewarray1111/state/count1]
02f9 ---- da00                             cmp         R5, #0
02fa ---- 9e09                             bleu        /id0584
               ;?         state.count1 = state.count1+1;
02fb ---- 5917                                 ld          R5, [#i2cimupressurewarray1111/state/count1]
02fc ---- d801                                 add         R5, #1
02fd ---- 5d17                                 st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?         if(state.i2cStatus == 0x0001){
02fe ---- 5918                                 ld          R5, [#i2cimupressurewarray1111/state/i2cStatus]
02ff ---- da01                                 cmp         R5, #1
0300 ---- be02                                 bneq        /id0587
               ;?             state.count1 = 0;
0301 ---- 5000                                     ld          R5, #0
0302 ---- 5d17                                     st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?         }
               /id0587:
               ;?     }
0303 ---- 06f8                             jmp         /id0583
               /id0584:
               ;?     
               ;?     i2cStart();
0304 ---- 6000                             ld          R6, #0x0000
0305 ---- 17a0                             jsr         I2cStart
0306 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_READ | MS5837_I2C_ADDR);
0307 ---- 70ed                             ld          R7, #237
0308 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0309 ---- 17b7                             jsr         I2cTxByte
030a ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cRxAck(output.tempresult[0]);
030b ---- 7000                             ld          R7, #0x0000
030c ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
030d ---- 17e0                             jsr         I2cRxByte
030e ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
030f ---- 7d11                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 0)]
               ;?     i2cRxAck(output.tempresult[1]);
0310 ---- 7000                             ld          R7, #0x0000
0311 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0312 ---- 17e0                             jsr         I2cRxByte
0313 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0314 ---- 7d12                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 1)]
               ;?     i2cRxNack(output.tempresult[2]);
0315 ---- 7001                             ld          R7, #0x0001
0316 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0317 ---- 17e0                             jsr         I2cRxByte
0318 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0319 ---- 7d13                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 2)]
               ;?     i2cStop();
031a ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
031b ---- 17d5                             jsr         I2cStop
031c ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     //end of pressure sensor
               ;?     
               ;?     //start of temperature sensor
               ;?     //Request D2 Conversion
               ;?     i2cStart();
031d ---- 6000                             ld          R6, #0x0000
031e ---- 17a0                             jsr         I2cStart
031f ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_WRITE | MS5837_I2C_ADDR);
0320 ---- 70ec                             ld          R7, #236
0321 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0322 ---- 17b7                             jsr         I2cTxByte
0323 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(MS5837_CONV_D2_4096);
0324 ---- 7058                             ld          R7, #88
0325 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0326 ---- 17b7                             jsr         I2cTxByte
0327 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cStop();
0328 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0329 ---- 17d5                             jsr         I2cStop
032a ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     
               ;?     
               ;?     //TODO: probably not want it so test pressure sensor without while
               ;?     //timeout changes the status?
               ;?     state.count1 = 1;
032b ---- 5001                             ld          R5, #1
032c ---- 5d17                             st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?     while(state.count1 > 0){
               /id0620:
032d ---- 5917                             ld          R5, [#i2cimupressurewarray1111/state/count1]
032e ---- da00                             cmp         R5, #0
032f ---- 9e09                             bleu        /id0621
               ;?         state.count1 = state.count1 +1;
0330 ---- 5917                                 ld          R5, [#i2cimupressurewarray1111/state/count1]
0331 ---- d801                                 add         R5, #1
0332 ---- 5d17                                 st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?         if(state.i2cStatus == 0x0001){
0333 ---- 5918                                 ld          R5, [#i2cimupressurewarray1111/state/i2cStatus]
0334 ---- da01                                 cmp         R5, #1
0335 ---- be02                                 bneq        /id0624
               ;?             state.count1 = 0;
0336 ---- 5000                                     ld          R5, #0
0337 ---- 5d17                                     st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?         }
               /id0624:
               ;?     }
0338 ---- 072d                             jmp         /id0620
               /id0621:
               ;?     
               ;?     i2cStart();
0339 ---- 6000                             ld          R6, #0x0000
033a ---- 17a0                             jsr         I2cStart
033b ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_WRITE | MS5837_I2C_ADDR);
033c ---- 70ec                             ld          R7, #236
033d ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
033e ---- 17b7                             jsr         I2cTxByte
033f ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(MS5837_ADC_READ);
0340 ---- 7000                             ld          R7, #0
0341 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0342 ---- 17b7                             jsr         I2cTxByte
0343 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cStop();
0344 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0345 ---- 17d5                             jsr         I2cStop
0346 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     
               ;?     
               ;?     //TODO: probably not want it so test pressure sensor without while
               ;?     //timeout changes the status?
               ;?     
               ;?     state.count1= 1;
0347 ---- 5001                             ld          R5, #1
0348 ---- 5d17                             st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?     while(state.count1 >0){
               /id0640:
0349 ---- 5917                             ld          R5, [#i2cimupressurewarray1111/state/count1]
034a ---- da00                             cmp         R5, #0
034b ---- 9e09                             bleu        /id0641
               ;?         state.count1 = state.count1+1;
034c ---- 5917                                 ld          R5, [#i2cimupressurewarray1111/state/count1]
034d ---- d801                                 add         R5, #1
034e ---- 5d17                                 st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?         if(state.i2cStatus == 0x0001){
034f ---- 5918                                 ld          R5, [#i2cimupressurewarray1111/state/i2cStatus]
0350 ---- da01                                 cmp         R5, #1
0351 ---- be02                                 bneq        /id0644
               ;?             state.count1 = 0;
0352 ---- 5000                                     ld          R5, #0
0353 ---- 5d17                                     st          R5, [#i2cimupressurewarray1111/state/count1]
               ;?         }
               /id0644:
               ;?     }
0354 ---- 0749                             jmp         /id0640
               /id0641:
               ;?     
               ;?     i2cStart();
0355 ---- 6000                             ld          R6, #0x0000
0356 ---- 17a0                             jsr         I2cStart
0357 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cTx(I2C_OP_READ | MS5837_I2C_ADDR);
0358 ---- 70ed                             ld          R7, #237
0359 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
035a ---- 17b7                             jsr         I2cTxByte
035b ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;?     i2cRxAck(output.tempresult[3]);
035c ---- 7000                             ld          R7, #0x0000
035d ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
035e ---- 17e0                             jsr         I2cRxByte
035f ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0360 ---- 7d14                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 3)]
               ;?     i2cRxAck(output.tempresult[4]);
0361 ---- 7000                             ld          R7, #0x0000
0362 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0363 ---- 17e0                             jsr         I2cRxByte
0364 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0365 ---- 7d15                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 4)]
               ;?     i2cRxNack(output.tempresult[5]);
0366 ---- 7001                             ld          R7, #0x0001
0367 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
0368 ---- 17e0                             jsr         I2cRxByte
0369 ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
036a ---- 7d16                             st          R7, [#(i2cimupressurewarray1111/output/tempresult + 5)]
               ;?     
               ;?     output.result[n] = (output.tempresult[0] <<8) | output.tempresult[1];
036b ---- 5911                             ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 0)]
036c ---- dda0                             lsl         R5, #8
036d ---- 6912                             ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 1)]
036e ---- dd0e                             or          R5, R6
036f ---- 607d                             ld          R6, #(i2cimupressurewarray1111/output/result + 0)
0370 ---- df3e                             st          R5, [R6+R0]
               ;?     output.temperature[0] = output.result[n];
0371 ---- 507d                             ld          R5, #(i2cimupressurewarray1111/output/result + 0)
0372 ---- df1d                             ld          R5, [R5+R0]
0373 ---- 5d0b                             st          R5, [#(i2cimupressurewarray1111/output/temperature + 0)]
               ;?     n = n+1;
0374 ---- 8801                             add         R0, #1
               ;?     output.result[n] = (output.tempresult[2] <<8) | output.tempresult[3];
0375 ---- 5913                             ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 2)]
0376 ---- dda0                             lsl         R5, #8
0377 ---- 6914                             ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 3)]
0378 ---- dd0e                             or          R5, R6
0379 ---- 607d                             ld          R6, #(i2cimupressurewarray1111/output/result + 0)
037a ---- df3e                             st          R5, [R6+R0]
               ;?     output.temperature[1] = output.result[n];
037b ---- 507d                             ld          R5, #(i2cimupressurewarray1111/output/result + 0)
037c ---- df1d                             ld          R5, [R5+R0]
037d ---- 5d0c                             st          R5, [#(i2cimupressurewarray1111/output/temperature + 1)]
               ;?     n = n+1;
037e ---- 8801                             add         R0, #1
               ;?     output.result[n] = (output.tempresult[4] <<8) | output.tempresult[5];
037f ---- 5915                             ld          R5, [#(i2cimupressurewarray1111/output/tempresult + 4)]
0380 ---- dda0                             lsl         R5, #8
0381 ---- 6916                             ld          R6, [#(i2cimupressurewarray1111/output/tempresult + 5)]
0382 ---- dd0e                             or          R5, R6
0383 ---- 607d                             ld          R6, #(i2cimupressurewarray1111/output/result + 0)
0384 ---- df3e                             st          R5, [R6+R0]
               ;?     output.temperature[2] = output.result[n];
0385 ---- 507d                             ld          R5, #(i2cimupressurewarray1111/output/result + 0)
0386 ---- df1d                             ld          R5, [R5+R0]
0387 ---- 5d0d                             st          R5, [#(i2cimupressurewarray1111/output/temperature + 2)]
               ;?     n = n+1;
0388 ---- 8801                             add         R0, #1
               ;?     i2cStop();
0389 ---- 6918                             ld          R6, [#i2cimupressurewarray1111/state/i2cStatus]
038a ---- 17d5                             jsr         I2cStop
038b ---- 6d18                             st          R6, [#i2cimupressurewarray1111/state/i2cStatus]
               ;? }
               /id0547:
               ;? state.ncount = n;
038c ---- 0d1a                         st          R0, [#i2cimupressurewarray1111/state/ncount]
               ;? if(state.ncount >=142){
038d ---- 091a                         ld          R0, [#i2cimupressurewarray1111/state/ncount]
038e 8600 8a8e                         cmp         R0, #142
0390 ---- ae05                         bltu        /id0683
               ;?     state.ncount = 0;
0391 ---- 0000                             ld          R0, #0
0392 ---- 0d1a                             st          R0, [#i2cimupressurewarray1111/state/ncount]
               ;?     fwGenAlertInterrupt();
0393 ---- 086c                             ld          R0, [#fwCtrlInt/bvTaskIoAlert]
0394 ---- 8201                             or          R0, #(1 << 0)
0395 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
               ;? }
               /id0683:
               ;? 
               ;? 
               ;? 
               ;? //state.count+ = 3;
               ;? //if (state.count >= 30){
               ;? //    state.count = 0;
               ;? //    fwGenAlertInterrupt();
               ;? //}
               ;? fwScheduleTask(1);
0396 ---- 0001                         ld          R0, #1
0397 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               i2cimupressurewarray1111/executeDone:
0398 ---- adb7                         rts         
               
               
               
               
               i2cimupressurewarray1111/terminate:
               i2cimupressurewarray1111/terminateDone:
0399 ---- adb7                         rts         
               .segment end "Task: i2cimupressurewarray1111"
               
               
               .segment begin "Procedure Libary"
               ; CLOBBERS:
               ;     R5
               I2cRepeatedStart:
                                       ; Wait T_LOW (SDA is already pull-up)
039a ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
039b ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
039c ---- 650f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
039d ---- 17a8                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STA
039e ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
039f ---- 17a5                         jsr         I2cWaitDelay
               I2cStart:
                                       ; SDA = driven low
03a0 ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_HD_STA
03a1 ---- 53f8                         ld          R5, #-((I2C_BASE_DELAY) - (1))
03a2 ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
03a3 ---- 450f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Done
03a4 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS
               ;     R5 = Delay excluding the I2cWaitDelay() call, in instruction cycles
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitDelay:
                                       ; Wait for the specified number of cycles
03a5 ---- d802 /waitLoop:                  add         R5, #2
03a6 ---- defe                         bneg        /waitLoop
               
                                       ; Done
03a7 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitSclStretch:
                                       ; Load the timeout (up to 20 ms) loop counter = configured number of us
03a8 ---- 53f6                         ld          R5, #(-I2C_STRETCH_TIMEOUT_US)
               /waitLoop:
                                           ; If SCL is high, we're done
03a9 ---- 2513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
03aa ---- ae0b                             biob1       /done
                                           ; Unroll the loop to 12 instructions = 1 per loop for faster response
03ab ---- 2513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
03ac ---- ae09                             biob1       /done
03ad ---- 2513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
03ae ---- ae07                             biob1       /done
03af ---- 2513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
03b0 ---- ae05                             biob1       /done
03b1 ---- 2513                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
03b2 ---- ae03                             biob1       /done
               
03b3 ---- d801                         add         R5, #1;
03b4 ---- bef4                         bnz         /waitLoop
               
               /timeout:               ; Timeout has occurred, so OR it into the flags and bail out
03b5 ---- e202                         or          R6, #0x0002
               
               /done:                  ; Done
03b6 ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = TX byte shift register
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = Updated TX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cTxByte:
                                       ; Bail out if an error has occurred
03b7 ---- ea00                         cmp         R6, #0
03b8 ---- be1b                         bnz         /done
               
               
                                       ; Transmit each bit in the data byte ...
03b9 ---- b50e                         loop        #8, /byteLoopEnd
               
                                           ; Output the bit to SDA
03ba ---- fda1                             lsl         R7, #1
03bb 8601 fc00                             tst         R7, #0x0100
03bd ---- b602                             bz          /dataSdaLow
03be ---- 660f /dataSdaHigh:                   iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
03bf ---- 8e02                             bra         /dataSdaDone
03c0 ---- 460f /dataSdaLow:                    iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
03c1 ---- fd47                             nop
               /dataSdaDone:
                                           ; Wait T_LOW
03c2 ---- 53fa                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (7))
03c3 ---- 17a5                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
03c4 ---- 650f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
03c5 ---- 17a8                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
03c6 ---- 53fd                             ld          R5, #-(I2C_BASE_DELAY - (I2C_WAIT_STRETCH_DELAY + 1))
03c7 ---- 17a5                             jsr         I2cWaitDelay
               
                                           ; SCL = driven low
03c8 ---- 450f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Receive the ACK bit
                                       ; SDA = pull-up
03c9 ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
03ca ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
03cb ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
03cc ---- 650f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
03cd ---- 17a8                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
03ce ---- 53fa                         ld          R5, #-((I2C_BASE_DELAY) - (3))
03cf ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; Read and store the SDA value in the status word
03d0 ---- 2613                         iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
03d1 ---- a601                         biob0       /ackSdaLow
03d2 ---- e201                             or          R6, #0x01
               /ackSdaLow:
                                       ; SCL = driven low
03d3 ---- 450f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
               
               /done:                  ; Done
03d4 ---- adb7                         rts
               
               
               
               
               ; CLOBBERS:
               ;     R5
               I2cStop:
                                       ; SDA = driven low
03d5 ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_LOW
03d6 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
03d7 ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
03d8 ---- 650f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
03d9 ---- 17a8                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_SU_STO
03da ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
03db ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; SDA = pull-up
03dc ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                       ; Wait T_BUF
03dd ---- 53f5                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
03de ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; Done
03df ---- adb7                         rts
               
               
               
               
               ; PARAMETERS:
               ;     R7 = Acknowledgment bit value, 0x0000 to transmit ACK, 0x0001 to transmit NAK
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = RX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cRxByte:
                                       ; Bail out if an error has occurred
03e0 ---- ea00                         cmp         R6, #0
03e1 ---- be1c                         bnz         /done
               
               
                                       ; Receive each bit in the data byte ...
03e2 ---- b50b                         loop        #8, /byteLoopEnd
               
                                           ; SDA = pull-up
03e3 ---- 660f                             iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
               
                                           ; Wait T_LOW
03e4 ---- 53f5                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
03e5 ---- 17a5                             jsr         I2cWaitDelay
               
                                           ; SCL = pull-up
03e6 ---- 650f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                           ; Wait for SCL stretching to end or time out
03e7 ---- 17a8                             jsr         I2cWaitSclStretch
               
                                           ; Wait T_HIGH
03e8 ---- 53ff                             ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 3))
03e9 ---- 17a5                             jsr         I2cWaitDelay
               
                                           ; Read and store SDA
03ea ---- fda1                             lsl         R7, #1
03eb ---- 2613                             iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
03ec ---- a601                             biob0       /dataSdaLow
03ed ---- f201                                 or          R7, #0x01
               /dataSdaLow:
                                           ; SCL = driven low
03ee ---- 450f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:
               
                                       ; Transmit the ACK bit, which is now in bit 8 of the shift register
                                       ; Output the bit to SDA
03ef 8601 fc00                         tst         R7, #0x0100
03f1 ---- b602                         bz          /ackSdaLow
03f2 ---- 660f /ackSdaHigh:                iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
03f3 ---- 8e02                         bra         /ackSdaDone
03f4 ---- 460f /ackSdaLow:                 iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
03f5 ---- fd47                         nop
               /ackSdaDone:
                                       ; Wait T_LOW
03f6 ---- 53f9                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (6))
03f7 ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; SCL = pull-up
03f8 ---- 650f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Wait for SCL stretching to end or time out
03f9 ---- 17a8                         jsr         I2cWaitSclStretch
               
                                       ; Wait T_HIGH
03fa ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
03fb ---- 17a5                         jsr         I2cWaitDelay
               
                                       ; SCL = driven low
03fc ---- 450f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               
                                       ; Mask the ACK bit in the received data
03fd ---- f0ff                         and         R7, #0xFF
               
               
               /done:                  ; Done
03fe ---- adb7                         rts
               .segment end "Procedure Libary"
               

; Generated by DESKTOP-6Q8NGS0 at 2018-05-03 19:48:38.152
